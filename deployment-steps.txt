# Initialize Git repository
git init

# Add all files
git add .

# Make first commit
git commit -m "Initial commit"

# Connect to your GitHub repository
git remote add origin https://github.com/asif1012-lgtm/zubair-react.git

# Push code to GitHub
git branch -M main
git push -u origin main
```

When prompted for password, use your personal access token instead of your GitHub password.

## Step 2: Environment Variables Setup
Create `.env.production` with these variables:
```env
# Your production API URL
VITE_API_URL=https://your-meta-verified-app.vercel.app

# SMTP Configuration
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-specific-password

# Admin Email
ADMIN_EMAIL=admin@example.com
```

## Step 3: Vercel Deployment Steps
1. Go to https://vercel.com
2. Sign up or log in
3. Click "New Project"
4. Import your GitHub repository
5. Configure project:
   - Framework Preset: Vite
   - Root Directory: ./
   - Build Command: npm run build
   - Output Directory: dist
   - Install Command: npm install

## Step 4: Set Vercel Environment Variables
1. In project settings:
   - Click "Settings" tab
   - Go to "Environment Variables" section
2. Add these variables:
   ```
   SMTP_HOST=smtp.gmail.com
   SMTP_PORT=587
   SMTP_USER=your-email@gmail.com
   SMTP_PASS=your-app-specific-password
   ADMIN_EMAIL=admin@example.com
   NODE_ENV=production
   ```

## Step 5: Deploy
1. Click "Deploy"
2. Wait for build completion
3. Your app will be live at: https://your-app-name.vercel.app

## Troubleshooting
If you see 500 errors:
1. Check Vercel logs for SMTP configuration
2. Verify all environment variables are set
3. Check if SMTP credentials are correct
4. Ensure SMTP port is not blocked

For 404 errors:
1. Verify Vercel routing configuration
2. Check client-side routes match server configuration

## Monitoring
1. Use Vercel dashboard to monitor:
   - Deployment status
   - Build logs
   - Runtime errors
   - API endpoints
2. Check email delivery logs in SMTP provider dashboard

## Step 6: Verifying Project Structure
1. Open your project folder
2. Confirm you have this exact structure:
```
/
├── client/
│   ├── src/
│   │   ├── components/
│   │   ├── hooks/
│   │   ├── lib/
│   │   ├── pages/
│   │   └── App.tsx
│   └── index.html
├── server/
├── shared/
├── vercel.json
└── package.json
```

3. Check that all required files exist:
   - In components/: form-one.tsx, form-two.tsx, layout.tsx
   - In pages/: home.tsx, validation.tsx, confirmation.tsx
   - In hooks/: use-mobile.tsx, use-toast.ts
   - In lib/: queryClient.ts


## Step 7: Installing Vercel CLI (Optional but Recommended)
1. Open your terminal
2. Run this command:
   ```bash
   npm install -g vercel
   ```
3. Login to Vercel:
   ```bash
   vercel login
   ```

## Step 8: Testing Local Build
1. Clear any previous builds:
   ```bash
   rm -rf dist
   rm -rf node_modules
   ```
2. Fresh install of dependencies:
   ```bash
   npm install
   ```
3. Try building locally:
   ```bash
   npm run build
   ```
4. Fix any build errors before proceeding

## Step 9: Adding Custom Domain (Optional)
1. In Vercel dashboard:
   - Go to project settings
   - Click "Domains" section
   - Click "Add Domain"
   - Enter your domain
   - Follow DNS configuration steps shown

## Step 10: Monitoring Your App
1. In Vercel dashboard:
   - Check "Analytics" tab
   - Monitor "Deployments" tab
   - Watch for any errors in "Logs"


## Troubleshooting Common Issues

### If Build Fails:
```bash
# Clear build cache
rm -rf .next .vercel/output dist

# Fresh install
rm -rf node_modules package-lock.json
npm install

# Update dependencies
npm update
```

### If Git Push Fails:
```bash
# Pull latest changes first
git pull origin main

# Force push (use with caution)
git push -f origin main